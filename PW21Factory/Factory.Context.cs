//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PW21Factory
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class FactoryEntities : DbContext
    {
        public FactoryEntities()
            : base("name=FactoryEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<InvoiceOnInput> InvoiceOnInputs { get; set; }
        public virtual DbSet<Movement> Movements { get; set; }
        public virtual DbSet<PriceDictionary> PriceDictionaries { get; set; }
        public virtual DbSet<RequiermentOnOutput> RequirementOnOutputs { get; set; }
    
        public virtual ObjectResult<MainDetailInfo_Result> MainDetailInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MainDetailInfo_Result>("MainDetailInfo");
        }
    
        public virtual int AddDetail(Nullable<int> detailID, string detailName, Nullable<int> detailCount)
        {
            var detailIDParameter = detailID.HasValue ?
                new ObjectParameter("DetailID", detailID) :
                new ObjectParameter("DetailID", typeof(int));
    
            var detailNameParameter = detailName != null ?
                new ObjectParameter("DetailName", detailName) :
                new ObjectParameter("DetailName", typeof(string));
    
            var detailCountParameter = detailCount.HasValue ?
                new ObjectParameter("DetailCount", detailCount) :
                new ObjectParameter("DetailCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDetail", detailIDParameter, detailNameParameter, detailCountParameter);
        }
    
        public virtual int AddDetailPrice(Nullable<int> detailID, Nullable<decimal> price)
        {
            var detailIDParameter = detailID.HasValue ?
                new ObjectParameter("DetailID", detailID) :
                new ObjectParameter("DetailID", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDetailPrice", detailIDParameter, priceParameter);
        }
    
        public virtual int AddInvoice(Nullable<int> invoiceID, Nullable<int> detailID, Nullable<int> inputCount, Nullable<System.DateTime> dateOfInput)
        {
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            var detailIDParameter = detailID.HasValue ?
                new ObjectParameter("DetailID", detailID) :
                new ObjectParameter("DetailID", typeof(int));
    
            var inputCountParameter = inputCount.HasValue ?
                new ObjectParameter("InputCount", inputCount) :
                new ObjectParameter("InputCount", typeof(int));
    
            var dateOfInputParameter = dateOfInput.HasValue ?
                new ObjectParameter("DateOfInput", dateOfInput) :
                new ObjectParameter("DateOfInput", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddInvoice", invoiceIDParameter, detailIDParameter, inputCountParameter, dateOfInputParameter);
        }
    
        public virtual int AddRequirement(Nullable<int> requirementID, Nullable<int> detailID, Nullable<int> outputCount, Nullable<System.DateTime> dateOfOutput)
        {
            var requirementIDParameter = requirementID.HasValue ?
                new ObjectParameter("RequirementID", requirementID) :
                new ObjectParameter("RequirementID", typeof(int));
    
            var detailIDParameter = detailID.HasValue ?
                new ObjectParameter("DetailID", detailID) :
                new ObjectParameter("DetailID", typeof(int));
    
            var outputCountParameter = outputCount.HasValue ?
                new ObjectParameter("OutputCount", outputCount) :
                new ObjectParameter("OutputCount", typeof(int));
    
            var dateOfOutputParameter = dateOfOutput.HasValue ?
                new ObjectParameter("DateOfOutput", dateOfOutput) :
                new ObjectParameter("DateOfOutput", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddRequirement", requirementIDParameter, detailIDParameter, outputCountParameter, dateOfOutputParameter);
        }
    
        public virtual int RemoveDetail(Nullable<int> detailID)
        {
            var detailIDParameter = detailID.HasValue ?
                new ObjectParameter("DetailID", detailID) :
                new ObjectParameter("DetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveDetail", detailIDParameter);
        }
    
        public virtual int RemoveDetailPrice(Nullable<int> detailID)
        {
            var detailIDParameter = detailID.HasValue ?
                new ObjectParameter("DetailID", detailID) :
                new ObjectParameter("DetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveDetailPrice", detailIDParameter);
        }
    
        public virtual int RemoveInvoice(Nullable<int> invoiceID)
        {
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveInvoice", invoiceIDParameter);
        }
    
        public virtual int RemoveRequirement(Nullable<int> requirementID)
        {
            var requirementIDParameter = requirementID.HasValue ?
                new ObjectParameter("RequirementID", requirementID) :
                new ObjectParameter("RequirementID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveRequirement", requirementIDParameter);
        }
    }
}
